generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model group {
  id        Int    @id @default(autoincrement())
  name      String
  dayOfWeek Int
  timeS     String
  timeE     String
  club      String @default("guest")
  color     String @default("#3788d8")
  price     Int    @default(0)
  locationschedule locationschedule[]
  participantgroup participantgroup[]
  coaches          groupcoach[]     // Relacja do trenerów
}

model groupcoach {
  groupId         Int               // Klucz obcy do Group
  userId          String            // Klucz obcy do User
  //coachData       coachdata?        // Relacja do danych coacha dla danej grupy

  group           group             @relation(fields: [groupId], references: [id])
  user            user              @relation(fields: [userId], references: [id])

  @@id([groupId, userId])            // Unikalny identyfikator
}

model locations {
  id         Int    @id @default(autoincrement())
  name       String
  club       String @default("guest")
  city       String
  postalCode String
  street     String
  streetNr   String
  locationschedule locationschedule[]
}

model locationschedule {
  id         Int @id @default(autoincrement())
  locationId Int
  groupId    Int
  group      group     @relation(fields: [groupId], references: [id])
  locations  locations @relation(fields: [locationId], references: [id])

  @@index([groupId])
  @@index([locationId])
}
model participant {
  id                 Int       @id @default(autoincrement())
  firstName          String
  lastName           String
  club               String
  email              String?
  phoneNumber        String?
  note               String?
  active             Boolean @default(false)
  participantgroup   participantgroup[]  
  attendance         attendance[] 
  payments           payment_participant[]
  regulamin          Boolean @default(false) 
}

model payment {
  id              Int         @id @default(autoincrement())
  amount          Int
  description     String?
  paymentDate     String    // Dodaj pole reprezentujące datę wprowadzenia płatności
  paymentMethod   String      @default("cash")// Dodaj pole reprezentujące sposób płatności
  month           String    // Dodaj pole reprezentujące miesiąc za który osoba płaci

  participants    payment_participant[]  // Relacja między płatnością a uczestnikami
}

model payment_participant {
  paymentId     Int
  participantId Int
  participant   participant @relation(fields: [participantId], references: [id])
  payment       payment     @relation(fields: [paymentId], references: [id])

  @@id([paymentId, participantId])
}

model participantgroup {
  id          Int @id @default(autoincrement())
  groupId     Int
  participantId Int
  participant   participant @relation(fields: [participantId], references: [id])
  group      group     @relation(fields: [groupId], references: [id])

  @@index([participantId])
  @@index([groupId])
}

model attendance {
  id            Int      @id @default(autoincrement())
  date          String
  groupId       Int
  participantId Int
  belongs       Boolean @default(true)
  participant   participant @relation(fields: [participantId], references: [id])

  @@index([participantId])
}

model user {
  id                        String    @id @default(uuid())
  name                      String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime?
  password                  String
  club                      String    @default("guest")
  role                      String    @default("guest")
  surname                   String?
  resetPasswordToken        String?   @unique
  resetPasswordTokenExpire  DateTime?
  verifyEmailToken          String?   @unique
  account                   account[]
  session                   session[]
  coachedGroups             groupcoach[] // Relacja do danych trenera
}

model verificationrequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, token])
}

model session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime
  user               user      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId])
}
